name: CI/CD Pipeline for Context-Aware Research Chatbot

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '16'

jobs:
  # Code Quality and Security Checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 bandit safety
    
    - name: Code formatting check
      run: black --check --diff .
    
    - name: Linting
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Security check
      run: |
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist
    
    - name: Set up test environment
      run: |
        mkdir -p data/pdfs data/vector_store logs
        export OPENAI_API_KEY="test-key"
        export DATABASE_URL="sqlite:///./test.db"
    
    - name: Run unit tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          pytest-report.xml

  # Docker Build and Test
  docker-build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build API Docker image
      run: |
        docker build --target api -t chatbot-api:test .
    
    - name: Build UI Docker images
      run: |
        docker build --target streamlit-ui -t chatbot-streamlit:test .
        docker build --target gradio-ui -t chatbot-gradio:test .
    
    - name: Test Docker images
      run: |
        # Test API container
        docker run -d --name test-api -p 8000:8000 \
          -e OPENAI_API_KEY=test-key \
          chatbot-api:test
        
        # Wait for container to start
        sleep 30
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Cleanup
        docker stop test-api
        docker rm test-api
    
    - name: Docker security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'chatbot-api:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance Tests
  performance-test:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install locust
    
    - name: Start services with docker-compose
      run: |
        echo "OPENAI_API_KEY=test-key" > .env
        docker-compose up -d api
        sleep 60
    
    - name: Run performance tests
      run: |
        # Create simple Locust test file
        cat > locustfile.py << EOF
        from locust import HttpUser, task, between
        
        class ChatbotUser(HttpUser):
            wait_time = between(1, 3)
            
            def on_start(self):
                # Create session
                response = self.client.post("/sessions", json={"user_id": "test"})
                self.session_id = response.json()["session_id"]
            
            @task(3)
            def chat_rag(self):
                self.client.post("/chat", json={
                    "message": "What is AI?",
                    "session_id": self.session_id
                })
            
            @task(1)
            def chat_math(self):
                self.client.post("/chat", json={
                    "message": "Calculate 2+2",
                    "session_id": self.session_id
                })
            
            @task(1)
            def health_check(self):
                self.client.get("/health")
        EOF
        
        locust -f locustfile.py --headless --users 10 --spawn-rate 2 \
               --host http://localhost:8000 --run-time 60s \
               --html performance-report.html
    
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.html
    
    - name: Cleanup
      run: docker-compose down

  # Documentation Build
  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install mkdocs mkdocs-material mkdocstrings[python]
    
    - name: Build documentation
      run: |
        # Create mkdocs.yml if it doesn't exist
        cat > mkdocs.yml << EOF
        site_name: Context-Aware Research Chatbot
        theme:
          name: material
          palette:
            primary: blue
            accent: light-blue
        nav:
          - Home: index.md
          - API Reference: api.md
          - Configuration: config.md
          - Deployment: deployment.md
        plugins:
          - mkdocstrings:
              handlers:
                python:
                  options:
                    docstring_style: google
        EOF
        
        mkdir -p docs
        cp README.md docs/index.md
        
        # Generate API documentation
        echo "# API Reference" > docs/api.md
        echo "Auto-generated API documentation" >> docs/api.md
        
        mkdocs build
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site

  # Build and Push Docker Images (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [test, docker-build, performance-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ghcr.io/${{ github.repository }}/chatbot-api
          ghcr.io/${{ github.repository }}/chatbot-streamlit
          ghcr.io/${{ github.repository }}/chatbot-gradio
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push API image
      uses: docker/build-push-action@v4
      with:
        context: .
        target: api
        push: true
        tags: ghcr.io/${{ github.repository }}/chatbot-api:latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Streamlit image
      uses: docker/build-push-action@v4
      with:
        context: .
        target: streamlit-ui
        push: true
        tags: ghcr.io/${{ github.repository }}/chatbot-streamlit:latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Gradio image
      uses: docker/build-push-action@v4
      with:
        context: .
        target: gradio-ui
        push: true
        tags: ghcr.io/${{ github.repository }}/chatbot-gradio:latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Notification and Cleanup
  notify:
    runs-on: ubuntu-latest
    needs: [code-quality, test, docker-build, docs]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ success() }}
      run: |
        echo "✅ All CI/CD pipeline steps completed successfully!"
        # Add Slack/Discord/email notification here if needed
    
    - name: Notify failure
      if: ${{ failure() }}
      run: |
        echo "❌ CI/CD pipeline failed!"
        # Add failure notification here if needed
    
    - name: Cleanup artifacts
      uses: geekyeggo/delete-artifact@v2
      with:
        name: |
          security-reports
          test-results-*
        failOnError: false